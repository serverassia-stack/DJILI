#!/usr/bin/env python3
# -*- coding: utf-8 -*-


"""
ูุฏูุฑ ุงูุงุดุชุฑุงูุงุช ุงููุชูุฏู - ุงููุณุฎุฉ ุงููุงููุฉ
ุงูุฅุตุฏุงุฑ: 2.0.0
"""


import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import os
import sys
import logging
from pathlib import Path
from datetime import datetime, timedelta
import threading
from typing import List, Dict, Optional


# ุฅุถุงูุฉ ุงููุณุงุฑ ุงูุญุงูู ุฅูู ูุณุงุฑ ุงูุงุณุชูุฑุงุฏ
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)


try:
    from subscription_core import (
        Subscription, SubscriptionManager, DateValidator,
        ExportManager, SmartAlertSystem, AppSettings,
        EnhancedSubscriptionApp
    )
except ImportError as e:
    print(f"ุฎุทุฃ ูู ุงุณุชูุฑุงุฏ ุงูููุชุจุงุช: {e}")
    print("ูุฑุฌู ุงูุชุฃูุฏ ูู ุชุซุจูุช ุฌููุน ุงููุชุทูุจุงุช:")
    print("pip install -r requirements.txt")
    sys.exit(1)


def setup_logging():
    """ุฅุนุฏุงุฏ ูุธุงู ุงูุชุณุฌูู."""
    try:
        log_dir = Path.home() / "SubscriptionManager" / "Logs"
        log_dir.mkdir(parents=True, exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "app.log", encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        logging.info("ุจุฏุฃ ุชุดุบูู ุงูุชุทุจูู")
    except Exception as e:
        print(f"ุฎุทุฃ ูู ุฅุนุฏุงุฏ ุงูุชุณุฌูู: {e}")


def check_dependencies():
    """ุงูุชุญูู ูู ุงูุชุจุนูุงุช ุงูุฃุณุงุณูุฉ."""
    try:
        import tkinter
        import json
        import datetime
        return True
    except ImportError as e:
        print(f"ุงูุชุจุนูุงุช ุงูุฃุณุงุณูุฉ ุบูุฑ ูุชููุฑุฉ: {e}")
        return False


def create_sample_data():
    """ุฅูุดุงุก ุจูุงูุงุช ูููุฐุฌูุฉ ูููุณุชุฎุฏู ุงูุฌุฏูุฏ."""
    try:
        manager = SubscriptionManager()
        subscriptions = manager.load_subscriptions()
        
        if not subscriptions:
            # ุฅุถุงูุฉ ุงุดุชุฑุงูุงุช ูููุฐุฌูุฉ
            sample_subs = [
                Subscription("ููุชููููุณ", "2024-02-15", 45.0, "ุชุฑููู", "ุงุดุชุฑุงู ุดูุฑู"),
                Subscription("ููุชููุจ ุจุฑููููู", "2024-03-01", 35.0, "ุชุฑููู", "ููุณููู ูููุฏูููุงุช"),
                Subscription("ุฃูุงุฒูู ุจุฑุงูู", "2024-01-30", 40.0, "ุชุณูู", "ุดุญู ูุฌุงูู"),
                Subscription("Microsoft 365", "2024-04-10", 60.0, "ุฃุนูุงู", "ุญุฒูุฉ ุฃูููุณ"),
                Subscription("Adobe Creative", "2024-05-05", 120.0, "ุชุนููู", "ุชุตููู ูุฌุฑุงูููุณ"),
            ]
            
            for sub in sample_subs:
                manager.save_subscription(sub)
                
            logging.info("ุชู ุฅูุดุงุก ุงูุจูุงูุงุช ุงููููุฐุฌูุฉ")
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ุงูุจูุงูุงุช ุงููููุฐุฌูุฉ: {e}")


def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ูุชุดุบูู ุงูุชุทุจูู."""
    try:
        # ุฅุนุฏุงุฏ ุงูุชุณุฌูู
        setup_logging()
        
        # ุงูุชุญูู ูู ุงูุชุจุนูุงุช
        if not check_dependencies():
            messagebox.showerror(
                "ุฎุทุฃ", 
                "ุงูููุชุจุงุช ุงูุฃุณุงุณูุฉ ุบูุฑ ูุซุจุชุฉ!\n"
                "ูุฑุฌู ุงูุชุฃูุฏ ูู ุชุซุจูุช Python ุจุดูู ุตุญูุญ."
            )
            return
        
        # ุฅูุดุงุก ุงููุงูุฐุฉ ุงูุฑุฆูุณูุฉ
        root = tk.Tk()
        
        # ุฅุนุฏุงุฏ ุนููุงู ุงููุงูุฐุฉ ูุฃููููุชูุง
        root.title("๐ ูุฏูุฑ ุงูุงุดุชุฑุงูุงุช ุงููุชูุฏู - ุงููุณุฎุฉ ุงููุงููุฉ")
        root.geometry("1200x800")
        
        # ูุญุงููุฉ ุชุญููู ุงูุฃููููุฉ
        try:
            icon_path = os.path.join(current_dir, "app_icon.ico")
            if os.path.exists(icon_path):
                root.iconbitmap(icon_path)
        except Exception as e:
            logging.warning(f"ูู ูุชููู ูู ุชุญููู ุงูุฃููููุฉ: {e}")
        
        # ุฅูุดุงุก ุจูุงูุงุช ูููุฐุฌูุฉ ูููุณุชุฎุฏููู ุงูุฌุฏุฏ
        create_sample_data()
        
        # ุจุฏุก ุงูุชุทุจูู ุงูุฑุฆูุณู
        app = EnhancedSubscriptionApp(root)
        
        # ุชุดุบูู ุงูุชุทุจูู
        logging.info("ุจุฏุก ูุงุฌูุฉ ุงููุณุชุฎุฏู")
        root.mainloop()
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")
        messagebox.showerror(
            "ุฎุทุฃ ูุงุฏุญ", 
            f"ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน ูู ุงูุชุทุจูู:\n{e}\n\n"
            "ูุฑุฌู ุฅุนุงุฏุฉ ุชุดุบูู ุงูุชุทุจูู. ุฅุฐุง ุงุณุชูุฑ ุงูุฎุทุฃุ "
            "ุงุชุตู ุจุงูุฏุนู ุงูููู."
        )


if __name__ == "__main__":
    # ุชุบููุฑ ุงูุชุฑููุฒ ูุฏุนู ุงูุนุฑุจูุฉ ูู console (ููุงุณุชุฎุฏุงู ูู Windows)
    if os.name == 'nt':
        try:
            import ctypes
            kernel32 = ctypes.windll.kernel32
            kernel32.SetConsoleOutputCP(65001)  # UTF-8
        except:
            pass
    
    print("=" * 60)
    print("๐ ุจุฏุก ุชุดุบูู ูุฏูุฑ ุงูุงุดุชุฑุงูุงุช ุงููุชูุฏู")
    print("=" * 60)
    print("ุงูุฅุตุฏุงุฑ: 2.0.0")
    print("ุงููุทูุฑ: ูุธุงู ุฅุฏุงุฑุฉ ุงูุงุดุชุฑุงูุงุช")
    print("=" * 60)
    
    main()
